{"version":3,"sources":["components/IssuesList.js","components/Pagination.js","components/IssuesPage.js","components/NewIssue.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["IssuesList","data","console","log","className","map","item","i","key","title","id","username","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","pageCount","Math","ceil","push","number","onClick","href","IssuesPage","useState","issueListData","setIssueListData","status","setStatus","defaultState","setDefualt","currentPage","setCurrentPage","currentPost","setCurrentPost","useEffect","axios","get","headers","then","res","result","catch","err","response","error","indexOfLastPost","indexOfFirstPost","currentList","slice","Navbar","bg","expand","style","height","margin","borderRadius","Toggle","aria-controls","Collapse","Nav","NavDropdown","Item","filter","post","to","Button","variant","width","borderColor","Brand","length","pageNumber","NewIssue","props","setTitle","body","setBody","setName","setId","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","e","target","value","Tabs","defaultActiveKey","Tab","eventKey","message","history","Routes","path","component","exact","App","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a468e358.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst IssuesList = ({ data }) => {\r\n\r\nconsole.log(\"Datas:\", data)\r\n    return(\r\n        <ul className=\"list-group mb-4\">\r\n            {data.map((item,i) => (\r\n                <li key={i} className=\"list-group-item\">\r\n                    <p>{item.title}</p>\r\n                    <p>#{item.id} opened by {item.username}</p>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n\r\n}\r\n\r\nexport default IssuesList;\r\n","import React from 'react';\r\nimport './IssuesPage.css';\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n    const pageNumbers = [];\r\n    const pageCount = Math.ceil(totalPosts / postsPerPage);\r\n    \r\n    for(let i = 1; i <= pageCount; i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n    \r\n    return (\r\n        <nav className=\"center\">\r\n            <ul className=\"pagination\">\r\n                {pageNumbers.map(number => (\r\n                    <li key={number} className=\"page-item\">\r\n                        <a onClick={() => paginate(number)} href=\"#!\" className=\"page-link\">{number}</a>\r\n                    </li>\r\n                ))}\r\n\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Pagination;","import React, { useState, useEffect } from 'react';\r\nimport { Button, NavDropdown, Nav, Navbar } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport IssuesList from './IssuesList';\r\nimport Pagination from './Pagination';\r\n\r\nconst IssuesPage = () => {\r\n  const [ issueListData, setIssueListData ] = useState([]);\r\n  const [ status, setStatus ] = useState(\"All issues\");\r\n  const [ defaultState, setDefualt ] = useState(true);\r\n  const [ currentPage, setCurrentPage ] = useState(1);\r\n  const [ currentPost, setCurrentPost ] = useState([]);\r\n  const postsPerPage  = 10;\r\n\r\n  useEffect(() => {\r\n    axios.get(\"http://localhost:4000/api/list-issue\",{\r\n        headers: { 'Content-Type' : 'application/json'}\r\n    })\r\n  .then(res => {\r\n    const data = res.data.result;\r\n    console.log(data);\r\n    setIssueListData([...data]);\r\n    \r\n  })\r\n  .catch(err => {\r\n    if(err && err.response && err.response.data) {\r\n      const error = err.response.data.error;\r\n     console.log(\"error\",error);\r\n    }\r\n     \r\n  })\r\n },[]);\r\n  \r\n const indexOfLastPost = currentPage * postsPerPage;\r\n const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n let currentList = issueListData.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n const paginate = (pageNumber) => {\r\n   setCurrentPage(pageNumber);\r\n   setDefualt(true);\r\n   setStatus(\"All issues\");\r\n }\r\n\r\n const handleListAll = () => {\r\n    setCurrentPost(currentList);\r\n    setDefualt(false);\r\n    setStatus(\"All issues\");\r\n};\r\nconst handleListOpen = () => {\r\n  setStatus(\"Open\");\r\n  currentList = currentList.filter(post=> post.status === \"open\");\r\n  setCurrentPost(currentList);\r\n  setDefualt(false);\r\n\r\n};\r\nconst handleListClose = () => {\r\n  setStatus(\"Closed\")\r\n  currentList = currentList.filter(post=> post.status === \"close\");\r\n  setCurrentPost(currentList);\r\n  setDefualt(false);\r\n \r\n};\r\n\r\n    return(\r\n        <>\r\n        <Navbar bg=\"light\" expand=\"lg\" style={{height: '10%', margin: '20px', borderRadius: '7px'}}>\r\n \r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            \r\n            <NavDropdown title=\"Filter\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item onClick = {handleListAll}>All</NavDropdown.Item>\r\n              <NavDropdown.Item onClick = {handleListOpen}>Is Open</NavDropdown.Item>\r\n              <NavDropdown.Item onClick = {handleListClose}>Is Closed</NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>\r\n          <Link to=\"/add-issue\"><Button variant=\"success\">New Issue</Button></Link>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      <div className = \"container mt-7\">\r\n        <Navbar bg=\"light\" expand=\"lg\" style={{width: '100%', height: '10%', borderRadius: '7px', borderColor: 'black'}}>\r\n          <Navbar.Brand href=\"#home\">{status}</Navbar.Brand>\r\n        </Navbar>\r\n        <IssuesList data={defaultState? currentList : currentPost}/>\r\n        <Pagination postsPerPage={postsPerPage} totalPosts={issueListData.length} paginate={paginate}/>\r\n      </div>\r\n</>\r\n    )\r\n}\r\n\r\nexport default IssuesPage;","import React, { useState} from 'react';\r\nimport { Tabs, Tab, InputGroup, FormControl, Button } from \"react-bootstrap\";\r\nimport './IssuesPage.css';\r\nimport axios from 'axios';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nconst NewIssue = (props) => {\r\n    const [ title, setTitle ] = useState('');\r\n    const [ body, setBody ] = useState('');\r\n    const [ username, setName ] = useState('');\r\n    let [ id,setId ] = useState(28);\r\n\r\n    const handleClick = () => {\r\n        setId(id++);\r\n        axios.post(\"http://localhost:4000/api/add-issue\", {\r\n            username, id, title, body, status: \"open\"\r\n\r\n        }).then((res) => {\r\n            console.log(res.data.message);\r\n            props.history.push(\"/list-issues\");\r\n        }).catch(err => {\r\n            console.log(\"Error\", err);\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div className=\"input-container\">\r\n            <InputGroup className=\"mb-1\">\r\n                <FormControl\r\n                placeholder=\"Username\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                onChange={e=> setName(e.target.value)}/>\r\n            </InputGroup>\r\n            <InputGroup className=\"mb-1\">\r\n                <FormControl\r\n                placeholder=\"Title\"\r\n                aria-label=\"Title\"\r\n                aria-describedby=\"basic-addon1\"\r\n                onChange={e=> setTitle(e.target.value)}/>\r\n            </InputGroup>\r\n\r\n            <Tabs defaultActiveKey=\"new\" id=\"noanim-tab-example\">\r\n                <Tab eventKey=\"write\" title=\"Write\">\r\n                   <TextareaAutosize onChange={e=> setBody(e.target.value)} style={{height:'100%', width:'100%'}}/>    \r\n                </Tab>\r\n                <Tab eventKey=\"preview\" title=\"Preview\">\r\n                <div className=\"preview-container\">\r\n                    <p>{title}</p>\r\n                    <p>{body}</p>\r\n                </div>\r\n                \r\n                </Tab>\r\n      </Tabs>\r\n      <Button variant=\"success\" onClick={handleClick} className=\"submit-button\">Submit Issue</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewIssue;","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport IssuesPage from './components/IssuesPage';\r\nimport NewIssue from './components/NewIssue';\r\n\r\nexport default function Routes() {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route path='/list-issues' component={ IssuesPage } exact/>\r\n                <Route path='/add-issue' component={ NewIssue } exact/>\r\n      \r\n            </Switch>\r\n        </Router>\r\n    \r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport Routes from './routes.js';\nimport { Navbar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Navbar bg=\"dark\">\n          <Navbar.Brand href=\"#home\" style={{color: 'white'}}>\n            git-hub\n          </Navbar.Brand>\n      </Navbar>\n      <Routes/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}